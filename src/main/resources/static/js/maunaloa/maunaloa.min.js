import { Draggable } from "./svg/draggable.js";

import { Chart } from "./canvas/chart.js";

var MAUNALOA;

document.addEventListener("DOMContentLoaded", function() {
    const setCanvasSize = function(selector, w, h) {
        const c1 = document.querySelectorAll(selector);
        for (let i = 0; i < c1.length; ++i) {
            const canvas = c1[i];
            canvas.width = w, canvas.height = h;
        }
    };
    setCanvasSize("canvas.c1", 1310, 500), setCanvasSize("canvas.c2", 1310, 200), setCanvasSize("canvas.c3", 1310, 110), 
    document.getElementById("btn-draggable-1").onclick = function() {
        Draggable.addLine("svg-1");
    };
    ((appId, chartRes, myCanvases) => {
        const myChart = new Chart(myCanvases), node = document.getElementById(appId);
        Elm.Maunaloa.Charts.embed(node, {
            chartResolution: chartRes
        }).ports.drawCanvas.subscribe(cfg => myChart.drawCanvases(cfg));
    })("my-app", 1, {
        SVG: "day-svg",
        MAIN_CHART: "day-chart",
        DOODLE: "day-doodle",
        LEVEL_LINES: "day-levellines",
        VOLUME: "day-vol",
        OSC: "day-osc"
    });
}), (MAUNALOA = MAUNALOA || {}).lineChart = function(hruler, vruler, ctx) {
    const scaleCandlestick = function(candleStick) {
        return {
            o: vruler.valueToPix(candleStick.o),
            h: vruler.valueToPix(candleStick.h),
            l: vruler.valueToPix(candleStick.l),
            c: vruler.valueToPix(candleStick.c)
        };
    }, _drawCandlestick = function(x, candleStick) {
        const x0 = x - 4;
        if (ctx.beginPath(), candleStick.c > candleStick.o) {
            ctx.moveTo(x, candleStick.h), ctx.lineTo(x, candleStick.o), ctx.moveTo(x, candleStick.c), 
            ctx.lineTo(x, candleStick.l);
            const cndlHeight = candleStick.c - candleStick.o;
            ctx.rect(x0, candleStick.o, 8, cndlHeight), ctx.fillRect(x0, candleStick.o, 8, cndlHeight);
        } else {
            let cndlHeight = candleStick.o - candleStick.c;
            if (0 === cndlHeight) {
                cndlHeight = 1;
                const x1 = x + 4;
                ctx.moveTo(x, candleStick.h), ctx.lineTo(x, candleStick.l), ctx.moveTo(x0, candleStick.c), 
                ctx.lineTo(x1, candleStick.c);
            } else ctx.moveTo(x, candleStick.h), ctx.lineTo(x, candleStick.c), ctx.moveTo(x, candleStick.o), 
            ctx.lineTo(x, candleStick.l), ctx.rect(x0, candleStick.c, 8, cndlHeight);
        }
        ctx.stroke();
    };
    return {
        drawLine: function(line, strokeStyle, lineWidth) {
            ctx.lineWidth = lineWidth || .5, ctx.strokeStyle = strokeStyle;
            const ys = function(line) {
                const result = [];
                for (let i = 0; i < line.length; ++i) result.push(vruler.valueToPix(line[i]));
                return result;
            }(line), xs = hruler.xaxis;
            ctx.beginPath(), ctx.moveTo(xs[0], ys[0]);
            for (let i = 1; i < ys.length; ++i) {
                const y = ys[i], x = xs[i];
                ctx.lineTo(x, y);
            }
            ctx.stroke();
        },
        drawCandlesticks: function(cs) {
            ctx.strokeStyle = "#000000", ctx.fillStyle = "#ffaa00", ctx.lineWidth = .5;
            const xs = hruler.xaxis, scs = function(cs) {
                const result = [];
                for (let i = 0; i < cs.length; ++i) result.push(scaleCandlestick(cs[i]));
                return result;
            }(cs), numCandlesticks = scs.length;
            for (let i = 0; i < numCandlesticks; ++i) _drawCandlestick(xs[i], scs[i]);
        },
        drawCandlestick: function(candleStick) {
            const scaled = scaleCandlestick(candleStick), x = hruler.timeStampToPix(candleStick.dx);
            _drawCandlestick(x, scaled);
        },
        drawBars: function(bars) {
            ctx.strokeStyle = "#ff0000", ctx.lineWidth = .5;
            for (var x, bar, xs = hruler.xaxis, sbars = function(bars) {
                const result = [];
                for (let i = 0; i < bars.length; ++i) result.push(vruler.valueToPix(bars[i]));
                return result;
            }(bars), numBars = sbars.length, i = 0; i < numBars; ++i) x = xs[i], bar = sbars[i], 
            ctx.beginPath(), ctx.moveTo(x, vruler.bottom), ctx.lineTo(x, bar), ctx.stroke();
        }
    };
}, (MAUNALOA = MAUNALOA || {}).vruler = function(chartHeight, valueRange) {
    const double2decimal = function(x, roundingFactor) {
        const rf = roundingFactor || 100;
        return Math.round(x * rf) / rf;
    }, minVal = valueRange[0], maxVal = valueRange[1], ppy = chartHeight / (maxVal - minVal);
    return {
        valueToPix: function(v) {
            return Math.round((maxVal - v) * ppy);
        },
        pixToValue: function(pix) {
            return double2decimal(maxVal - pix / ppy);
        },
        lines: function(ctx, chartWidth, numVlines) {
            ctx.fillStyle = "black", ctx.font = "16px Arial", ctx.strokeStyle = "#bbb", ctx.lineWidth = .25;
            const step = chartHeight / (numVlines - 1);
            for (let i = 0; i < numVlines; ++i) {
                const curStep = step * i, curVal = double2decimal(maxVal - curStep / ppy);
                ctx.beginPath(), ctx.moveTo(0, curStep), ctx.lineTo(chartWidth, curStep), 0 === i ? ctx.fillText(curVal, 10, curStep + 18) : ctx.fillText(curVal, 10, curStep - 5), 
                ctx.stroke();
            }
        },
        bottom: chartHeight
    };
}, MAUNALOA.hruler = function(width, startDateAsMillis, offsets, drawLegend, buffer) {
    const x0 = offsets[offsets.length - 1], x1 = offsets[0] + buffer, ppx = width / (x1 - x0), startDate = new Date(startDateAsMillis), calcPix = function(x) {
        return ppx * (x - x0);
    }, dateToPix = function(d) {
        return calcPix(x0 + (d - startDate) / 864e5);
    }, incMonths = function(origDate, numMonths) {
        return new Date(origDate.getFullYear(), origDate.getMonth() + numMonths, 1);
    }, xaxis = function() {
        const result = [];
        for (let i = 0; i < offsets.length; ++i) result[i] = calcPix(offsets[i]);
        return result;
    }();
    return {
        dateToPix,
        timeStampToPix: function(tm) {
            const d = new Date(tm);
            return dateToPix(d);
        },
        xaxis,
        startDate,
        lines: function(ctx, chartHeight, numIncMonths) {
            ctx.fillStyle = "black", ctx.font = "16px Arial", ctx.strokeStyle = "#bbb", ctx.lineWidth = .25;
            let d0x = incMonths(startDate, numIncMonths);
            const txtY = chartHeight - 5;
            let curX = 0;
            for (;curX < width; ) curX = dateToPix(d0x), ctx.beginPath(), ctx.moveTo(curX, 0), 
            ctx.lineTo(curX, chartHeight), ctx.stroke(), !0 === drawLegend && ctx.fillText((d = d0x).getMonth() + 1 + "." + d.getFullYear(), curX + 5, txtY), 
            d0x = incMonths(d0x, numIncMonths);
            var d;
        }
    };
};