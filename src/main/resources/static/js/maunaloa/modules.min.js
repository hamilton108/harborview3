export class Chart {
    constructor(myCanvases) {
        this.myCanvases = myCanvases;
    }
    drawCanvases(cfg) {
        Chart.drawCanvas(cfg, cfg.chart, this.myCanvases.MAIN_CHART, !0), Chart.drawCanvas(cfg, cfg.chart2, this.myCanvases.OSC, !0), 
        Chart.drawCanvas(cfg, cfg.chart3, this.myCanvases.VOLUME, !1);
    }
    static drawCanvas(cfg, curChart, curCanvas, drawLegend) {
        if (null === curChart) return;
        let ctx, canvas;
        [ctx, canvas] = Chart.clearCanvas(curCanvas);
        const offsets = cfg.xaxis, myHruler = MAUNALOA.hruler(1300, cfg.startdate, offsets, drawLegend, 5);
        myHruler.lines(ctx, canvas.height, cfg.numIncMonths);
        const myVruler = MAUNALOA.vruler(canvas.height, curChart.valueRange);
        myVruler.lines(ctx, canvas.width, curChart.numVlines);
        const lineChart = MAUNALOA.lineChart(myHruler, myVruler, ctx), strokes = cfg.strokes;
        if (null !== curChart.lines) for (let i = 0; i < curChart.lines.length; ++i) {
            const line = curChart.lines[i], curStroke = void 0 === strokes[i] ? "#000000" : strokes[i];
            lineChart.drawLine(line, curStroke);
        }
        if (null !== curChart.bars) for (let i = 0; i < curChart.bars.length; ++i) lineChart.drawBars(curChart.bars[i]);
        null !== curChart.candlesticks && lineChart.drawCandlesticks(curChart.candlesticks);
    }
    static clearCanvas(canvasId) {
        const canvas = document.getElementById(canvasId), ctx = canvas.getContext("2d");
        return ctx.clearRect(0, 0, canvas.width, canvas.height), [ ctx, canvas ];
    }
};

export class Draggable {
    static addLine(svgId) {
        const svg = document.getElementById(svgId);
        if (null === svg) return;
        let curMarker = null;
        const curMarkerDown = function(e) {
            curMarker = e.target;
        }, curMarkerUp = function() {
            curMarker = null;
        }, l = Draggable.svgLine("200", "20", "20", "200"), l50 = Draggable.svgLine("110", "110", "1200", "110"), c1 = Draggable.draggableMarker("1", l.getAttribute("x1"), l.getAttribute("y1"), curMarkerDown, curMarkerUp), c2 = Draggable.draggableMarker("2", l.getAttribute("x2"), l.getAttribute("y2"), curMarkerDown, curMarkerUp);
        svg.addEventListener("mousemove", function(e) {
            if (null !== curMarker) {
                const x = e.offsetX, y = e.offsetY;
                let x0, y0;
                curMarker.setAttribute("cx", x), curMarker.setAttribute("cy", y), "1" === curMarker.id ? (l.setAttribute("x1", x), 
                l.setAttribute("y1", y), y0 = l.getAttribute("y2"), x0 = l.getAttribute("x2")) : (l.setAttribute("x2", x), 
                l.setAttribute("y2", y), y0 = l.getAttribute("y1"), x0 = l.getAttribute("x1")), 
                x0 = parseFloat(x0), y0 = parseFloat(y0);
                const x50 = Math.abs(x - x0) / 2 + Math.min(x, x0), y50 = Math.abs(y - y0) / 2 + Math.min(y, y0);
                l50.setAttribute("x1", x50), l50.setAttribute("y1", y50), l50.setAttribute("y2", y50);
            }
        }), svg.appendChild(l), svg.appendChild(l50), svg.appendChild(c1), svg.appendChild(c2);
    }
    static draggableMarker(id, cx, cy, fnDown, fnUp) {
        const c = document.createElementNS("http://www.w3.org/2000/svg", "circle");
        return c.id = id, c.setAttribute("r", "5"), c.setAttribute("stroke", "green"), c.setAttribute("stroke-width", "1"), 
        c.setAttribute("fill", "transparent"), c.setAttribute("cx", cx), c.setAttribute("cy", cy), 
        c.setAttribute("class", "draggable"), c.addEventListener("mousedown", fnDown), c.addEventListener("mouseup", fnUp), 
        c;
    }
    static svgLine(x1, y1, x2, y2) {
        const l = document.createElementNS("http://www.w3.org/2000/svg", "line");
        return l.setAttribute("x1", x1), l.setAttribute("y1", y1), l.setAttribute("x2", x2), 
        l.setAttribute("y2", y2), l.setAttribute("stroke", "red"), l.setAttribute("stroke-width", 1), 
        l;
    }
    static removeElements(svgId) {
        document.getElementById(svgId);
    }
};